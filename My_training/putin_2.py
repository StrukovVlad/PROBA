class MyClass:
    def method(self):
        return 'instance method called', self

    @classmethod
    def classmethod(cls):
        return 'class method called', cls

    @staticmethod
    def staticmethod():
        return 'static method called'

'''
Instance Methods-

Первый метод в MyClass, названный method, является обычным методом экземпляра.
Он принимает один параметр self, который указывает на экземпляр MyClass при вызове метода
(но, конечно, методы экземпляра могут принимать более одного параметра).
Он может изменять состояние объекта и состояние класса.
Через параметр self методы экземпляра могут свободно обращаться к атрибутам и другим методам того же объекта.
Мало того, что они могут изменять состояние объекта, методы экземпляра также могут получить доступ 
к самому классу через атрибут self.__class__.
 Это означает, что методы экземпляра также могут изменять состояние класса.'''
'''
>>> obj = MyClass()
>>> obj.method()
('instance method called', <MyClass instance at 0x10205d190>)

Это подтвердило, что метод (метод экземпляра) имеет доступ к экземпляру объекта 
( <экземпляр MyClass>) через аргумент self.
При вызове метода Python заменяет аргумент self объектом экземпляра obj.


>>> MyClass.method(obj)
('instance method called', <MyClass instance at 0x10205d190>)
'''

'''
Class Methods-

@classmethod decorator to flag it as a class method.

Вместо того чтобы принимать параметр self, методы класса принимают параметр cls,
указывающий на класс, а не на экземпляр объекта, при вызове метода.
Поскольку метод класса имеет доступ только к этому аргументу cls,
 он не может изменять состояние экземпляра объекта.
Для этого потребуется доступ к себе.
Однако методы класса по-прежнему могут изменять состояние класса,
которое применяется ко всем экземплярам класса.

'''

>>> obj.classmethod()
('class method called', <class MyClass at 0x101a2f4c8>)

Вызов classmethod() показал нам, что он не имеет доступа к объекту <MyClass instance>,
а только к объекту <class MyClass>, представляющему сам класс
(все в Python является объектом, даже сами классы).
'''

'''
Static Methods-

@staticmethod decorator to flag it as a static method.

Этот тип метода не принимает ни параметров self, ни cls
(но, конечно, он может принимать произвольное количество других параметров).
Поэтому статический метод не может ни изменять состояние объекта, ни состояние класса.
Статические методы ограничены в том, к каким данным они могут получить доступ,
и в первую очередь они представляют собой способ пространства имен ваших методов.


>>> obj.staticmethod()
'static method called'